const OpenAI = require("openai");
const validateElasticsearchQuery = require("./validateElasticsearchQuery");
require("dotenv").config();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

async function generateQuery(userQuery) {
  console.log("ü§ñ Enviando consulta para a OpenAI...");

  const messages = [
    {
      role: "system",
      content: `
      Voc√™ √© um assistente de busca para um sistema de gerenciamento de livros. Construa uma consulta Elasticsearch a partir da entrada do usu√°rio. Utilize os seguintes campos dispon√≠veis para a busca:
      - id: ID do livro (keyword)
      - publish_date: Data de publica√ß√£o (date) - Usado para filtrar por intervalo de datas.
      - text_1: Continua√ß√£o da descri√ß√£o, geralmente mostra o nome dos cap√≠tulos (text).
      - text_2: T√≠tulo do livro (text) - Usado para buscar por t√≠tulo principal do livro.
      - text_3: Descri√ß√£o do livro (text) - Usado para buscar por descri√ß√£o ou conte√∫do geral do livro.
      - text_4: C√≥pia do t√≠tulo, igual a text_2 (text).
      - text_5: Subt√≠tulo do livro (text).
      - tags: Tags associadas ao livro (nested), cada tag possui id (keyword) e title (text).
      - filters: Filtros associados ao livro (nested), cada filtro possui id (keyword) e title (text).
      - editions: Edi√ß√µes do livro (nested), cada edi√ß√£o possui:
        - book_num_id: ID num√©rico do livro (keyword)
        - is_actual: Se a edi√ß√£o √© atual (boolean)
        - isbn: ISBN da edi√ß√£o (text)
        - subtitle: Subt√≠tulo da edi√ß√£o (text)
        - num_id: ID num√©rico da edi√ß√£o (keyword)
        - pages: N√∫mero de p√°ginas (integer)
        - number: N√∫mero da edi√ß√£o (integer)
        - is_published: Se a edi√ß√£o foi publicada (boolean)
        - publish_date: Data de publica√ß√£o (date)
        - description: Descri√ß√£o da edi√ß√£o (text)
        - title: T√≠tulo da edi√ß√£o (text)
        - authors: Autores da edi√ß√£o (nested), cada autor possui title (text) e id (keyword). IMPORTANTE: use este campo para buscar nomes de autores, √© um array de objetos podendo conter mais de um autor. Ao buscar por autor de qualquer maneira, use sempre match_phrase.
        - chapters: Cap√≠tulos da edi√ß√£o (nested), cada cap√≠tulo possui:
          - chapter_type: Tipo de cap√≠tulo (text)
          - num_id: ID num√©rico do cap√≠tulo (keyword)
          - order: Ordem do cap√≠tulo (integer)
          - id: ID do cap√≠tulo (keyword)
          - language: Idioma do cap√≠tulo (text)
          - type: Tipo de cap√≠tulo (text)
          - title: T√≠tulo do cap√≠tulo (text)
          - pdf: URL do PDF do cap√≠tulo (text)
          - ocr: Texto extra√≠do do OCR do cap√≠tulo (text) - Usado para buscar pelo conte√∫do completo dos cap√≠tulos.

      Regras de busca:
      - Se o usu√°rio se referir ao t√≠tulo, use \\text_2\\.
      - Se o usu√°rio se referir √† descri√ß√£o, use \\text_3\\.
      - Se o usu√°rio quer pesquisar no conte√∫do, use \\text_3\\, \\tags\\ e \\editions.chapters.ocr\\.
      - Se o usu√°rio quer pesquisar em todo o conte√∫do, use \\text_3\\, \\text_2\\, \\text_5\\, \\text_1\\, \\tags\\, \\editions.chapters.ocr\\.

      Identifica√ß√£o de termos exatos:
      - Se o usu√°rio usar aspas duplas ("") ou especificar explicitamente que √© um termo exato, use \\match_phrase\\.
      - Se o usu√°rio usar aspas simples ('') para um termo, a busca deve considerar tanto o termo exato (\\match_phrase\\) quanto os termos separados (\\match\\).

      Se a consulta do usu√°rio for muito ampla ou vaga, ou se o usu√°rio explicitamente pedir para "melhorar a busca", adicione automaticamente termos relacionados, varia√ß√µes, plurais e sin√¥nimos. Por exemplo:
      - Para "candidato", adicione "candidatos", "candidata", "candidatas", "candidatar" e etc, sempre o m√°ximo que conseguir de palavras similares deste tipo.
      - Para "direito eleitoral", adicione termos relacionados como "lei", "legisla√ß√£o" e etc.

      IMPORTANTE 1: Conforme o pedido do usuario, fa√ßa um auto balanceamento de boosts, mas cuidado pois [nested] query n√£o suportam [_score]. \\text_2\\, \\tags\\ e \\editions.chapters.ocr\\ s√£o geralmente os principais pesos quando buscamos em todo conte√∫do.
      IMPORTANTE 2: Fuzziness n√£o pode ser usado com tipo cross_fields. S√≥ aplique fuzziness se n√£o houver cross_fields.

      Construa a consulta JSON com base nas diretrizes acima, sem incluir texto adicional ou formata√ß√£o.
      `,
    },
    {
      role: "user",
      content: `Crie uma consulta para: ${userQuery}`,
    },
  ];

  for (let attempts = 0; attempts < 3; attempts++) {
    try {
      const gptResponse = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: messages,
      });

      const responseText = gptResponse.choices[0].message.content.trim();
      const elasticsearchQuery = JSON.parse(responseText);

      console.log(
        `üìÑ Tentativa ${attempts + 1}: Consulta Elasticsearch gerada:`,
        JSON.stringify(elasticsearchQuery, null, 2)
      );

      if (
        elasticsearchQuery.query &&
        elasticsearchQuery.query.bool &&
        elasticsearchQuery.query.bool.should
      ) {
        const filteredQuery = {
          query: {
            bool: {
              must: [
                { match: { type: "book" } },
                ...elasticsearchQuery.query.bool.should,
              ],
            },
          },
        };

        console.log(
          "üìÑ Consulta Elasticsearch final: ",
          JSON.stringify(filteredQuery, null, 2)
        );

        const isValid = validateElasticsearchQuery(filteredQuery);
        if (isValid) {
          console.log(`‚úÖ Tentativa ${attempts + 1}: Consulta v√°lida`);
          return filteredQuery;
        } else {
          console.log(
            `‚ùå Tentativa ${attempts + 1}: Consulta inv√°lida`,
            responseText
          );
        }
      } else if (
        elasticsearchQuery.query &&
        (elasticsearchQuery.query.multi_match ||
          elasticsearchQuery.query.match_phrase ||
          elasticsearchQuery.query.match)
      ) {
        const filteredQuery = {
          query: {
            bool: {
              must: [{ match: { type: "book" } }, elasticsearchQuery.query],
            },
          },
        };

        console.log(
          "üìÑ Consulta Elasticsearch final: ",
          JSON.stringify(filteredQuery, null, 2)
        );

        const isValid = validateElasticsearchQuery(filteredQuery);
        if (isValid) {
          console.log(`‚úÖ Tentativa ${attempts + 1}: Consulta v√°lida`);
          return filteredQuery;
        } else {
          console.log(
            `‚ùå Tentativa ${attempts + 1}: Consulta inv√°lida`,
            responseText
          );
        }
      } else {
        console.log(
          `‚ùå Tentativa ${attempts + 1}: Resposta inv√°lida da OpenAI`,
          responseText
        );
      }
    } catch (error) {
      console.log(
        `‚ùå Tentativa ${attempts + 1}: Erro ao gerar consulta`,
        error
      );
    }
  }

  throw new Error(
    "A consulta n√£o p√¥de ser gerada a partir da entrada fornecida ap√≥s v√°rias tentativas."
  );
}

module.exports = generateQuery;
